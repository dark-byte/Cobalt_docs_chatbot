{
    "url": "https://docs.gocobalt.io/build/workflow/group",
    "text": "Loop Node - Cobalt Cobalt home page v2 Search... Dashboard Contact Us Dashboard Search... Navigation Nodes Loop Node Documentation Implementation & Guides API Reference SDKs Resources Cobalt home page v2 Postman Get Your API Key Examples Getting Started Introduction Quickstart Build Platform Setup Connectors Workflows Overview Triggers Nodes Custom Code Node Data Mapper Delay Node Loop Node HTTP Node Internal Functions Merge Node PDF Node Response Node Rule Node Send Email Node Transform Node Human Task Data Variables Workflow Testing Templating in Workflows Advanced Features Ship Integrations Auth Flows Try API Maintain Observability with Logs Reliability Custom App Custom App Setup Deployment Cobalt Deployment Hosting Solutions Governance & Compliance Security Application Security Compliance & Certifications Privacy Policy Term of Use Nodes Loop Node The Loop Node in Cobalt allows users to iterate over entities or execute a series of actions for a fixed number of iterations. To incorporate repetitive actions or iterate over arrays within a workflow, users simply place the desired action nodes inside the Loop Node and provide values for the input fields based on their requirements. ​ Actions The Loop Node offers two distinct actions to choose from: Iterating Array Select this action when iterating over an array. When using this action, the user specifies the array to iterate over. Fixed Iteration Choose this action when you want to iterate a fixed number of times. With this action, users define the number of iterations. ​ Input Fields The input fields for the Loop Node vary based on the selected action. In case of Iterating Array , you need to provide the array which will determine the no. of times the loop will be executed while in Fixed iteration , you simply provide the Number of Iterations . ​ Accessing Array Item inside Loop Node To access the array item that is being passed in the Loop Node, within any node for each iteration, it can be done so by calling array_item object. Consider you want to access an Id that is unique within each array item that is being passed in the Loop Node. To do so, do the following templating {{node.<node_no.>.body.array_item.Id}} . Delay Node HTTP Node linkedin twitter Powered by Mintlify On this page Actions Input Fields Accessing Array Item inside Loop Node"
}